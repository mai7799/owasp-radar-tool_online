import { dpr, updateEChartsChartTitle, downloadChart } from './chart-common.js';

// --- 全局變數 ---
const echartsCategories_VulnMap = [
    { id: 'A01', name: 'A01: 權限控制失效' }, { id: 'A02', name: 'A02: 加密機制失效' },
    { id: 'A03', name: 'A03: 注入式攻擊' }, { id: 'A04', name: 'A04: 不安全設計' },
    { id: 'A05', name: 'A05: 安全設定弱點' }, { id: 'A06', name: 'A06: 危險或過舊的元件' },
    { id: 'A07', name: 'A07: 認證及驗證機制失效' }, { id: 'A08', name: 'A08: 軟體及資料完整性失效' },
    { id: 'A09', name: 'A09: 資安記錄及監控失效' }, { id: 'A10', name: 'A10: 伺服端請求偽造' }
];
let vulnerabilitiesForVulnMap = [];
let echartsRadarInstance = null;

// --- 函式定義 ---
function populateVulnCategoryDropdown() {
    const categorySelect = document.getElementById('vulnCategoryInMap');
    if (!categorySelect) return;
    categorySelect.innerHTML = '';
    echartsCategories_VulnMap.forEach((cat, index) => {
        const option = document.createElement('option');
        option.value = index; // Use index as value
        option.textContent = cat.name;
        categorySelect.appendChild(option);
    });
}

function updateVulnTableInMapTab() {
    const listElement = document.getElementById('vulnerabilityListInMap');
    if (!listElement) return;
    listElement.innerHTML = '';
    vulnerabilitiesForVulnMap.forEach((vuln, index) => {
        const li = document.createElement('li');
        const severityScore = vuln.severity;
        let severityClass = '';
        if (severityScore >= 9.0) severityClass = 'sev-critical';
        else if (severityScore >= 7.0) severityClass = 'sev-high';
        else if (severityScore >= 4.0) severityClass = 'sev-medium';
        else severityClass = 'sev-low';

        li.innerHTML = `
            <span>
                <span class="severity-legend" style="margin-right: 5px;"><span class="${severityClass}"></span></span>
                <strong>${echartsCategories_VulnMap[vuln.categoryIndex].id}:</strong> ${vuln.name} (${vuln.severity})
            </span>
            <button class="delete-btn" data-index="${index}">刪除</button>
        `;
        listElement.appendChild(li);
    });
     // Re-add event listeners for delete buttons
    listElement.querySelectorAll('.delete-btn').forEach(button => {
        button.addEventListener('click', (e) => {
            const indexToRemove = parseInt(e.target.dataset.index, 10);
            vulnerabilitiesForVulnMap.splice(indexToRemove, 1);
            updateVulnTableInMapTab(); // Rerender table
            updateEchartsRadarForVulnMap(); // Update chart
        });
    });
}

function updateEchartsRadarForVulnMap() {
    if (!echartsRadarInstance) return;
    const categoryMaxScores = Array(10).fill(0);
    vulnerabilitiesForVulnMap.forEach(vuln => {
        categoryMaxScores[vuln.categoryIndex] = Math.max(categoryMaxScores[vuln.categoryIndex], vuln.severity);
    });
    echartsRadarInstance.setOption({
        series: [{ data: [{ value: categoryMaxScores }] }]
    });
}

function addVulnToMap() {
    const nameInput = document.getElementById('vulnNameInMap');
    const categorySelect = document.getElementById('vulnCategoryInMap');
    const severityInput = document.getElementById('vulnSeverityInMap');

    const name = nameInput.value.trim();
    const categoryIndex = parseInt(categorySelect.value, 10);
    const severity = parseFloat(severityInput.value);

    if (!name) { alert('請輸入弱點名稱'); return; }
    if (isNaN(severity) || severity < 0.1 || severity > 10) { alert('請輸入有效的嚴重度分數 (0.1 - 10)'); return; }

    vulnerabilitiesForVulnMap.push({ name, categoryIndex, severity });
    vulnerabilitiesForVulnMap.sort((a, b) => b.severity - a.severity); // Sort by severity

    updateVulnTableInMapTab();
    updateEchartsRadarForVulnMap();

    nameInput.value = ''; // Clear input
    nameInput.focus();
}

function resetVulnMap() {
    if (confirm('確定要清除所有弱點資料嗎？')) {
        vulnerabilitiesForVulnMap = [];
        updateVulnTableInMapTab();
        updateEchartsRadarForVulnMap();
    }
}

function parseWordForVulnMap() {
    const fileInput = document.getElementById('vulnMapWordFile');
    if (!fileInput.files.length) {
        alert('請先選擇 Word 檔案');
        return;
    }
    const file = fileInput.files[0];
    const reader = new FileReader();

    reader.onload = function (event) {
        const arrayBuffer = event.target.result;

        Promise.all([
            mammoth.convertToHtml({ arrayBuffer }),
            mammoth.extractRawText({ arrayBuffer })
        ]).then(([htmlResult, rawTextResult]) => {
            // 步驟 1: 從HTML解析表格，取得弱點名稱和OWASP分類
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = htmlResult.value;
            const tables = tempDiv.querySelectorAll('table');
            let vulnerabilities = [];

            let vulnListTable = null;
            for (let table of tables) {
                const headers = Array.from(table.querySelectorAll('tr:first-child td')).map(td => td.innerText.trim());
                if (headers.includes('漏洞名稱') && headers.includes('OWASP Top 10')) {
                    vulnListTable = table;
                    break;
                }
            }

            if (!vulnListTable) {
                alert('在文件中找不到符合格式的 "受測目標風險漏洞名稱列表" 表格。');
                return;
            }

            const rows = vulnListTable.querySelectorAll('tr');
            rows.forEach((row, rowIndex) => {
                if (rowIndex === 0) return;

                const cells = row.querySelectorAll('td');
                let vulnName = '';
                let owaspText = '';

                if (cells.length === 7) {
                    vulnName = cells[2].innerText.trim();
                    owaspText = cells[6].innerText.trim();
                } else if (cells.length === 6) {
                    vulnName = cells[1].innerText.trim();
                    owaspText = cells[5].innerText.trim();
                }

                const owaspMatch = owaspText ? owaspText.match(/A\d{2}/) : null;

                if (vulnName && owaspMatch) {
                    vulnerabilities.push({
                        name: vulnName,
                        owaspId: owaspMatch[0],
                        severity: 0
                    });
                }
            });

            // 步驟 2: (修正後的核心邏輯) 將詳細說明的文字分割成獨立區塊，再從中尋找分數
            const rawText = rawTextResult.value;
            const analysisStartIndex = rawText.indexOf("弱點分析與測試說明");
            const analysisText = analysisStartIndex !== -1 ? rawText.substring(analysisStartIndex) : "";

            // 以每個弱點的標題 (例如 "嚴重風險 - ") 作為分隔符，將內文切成多個區塊
            const detailChunks = analysisText.split(/(?:嚴重|高|中|低)風險 - /).slice(1);

            // 步驟 3: 遍歷從表格中得到的每個弱點，去對應的區塊中找分數
            vulnerabilities.forEach(vuln => {
                // 找到對應的文字區塊 (區塊的開頭就是弱點名稱)
                const correctChunk = detailChunks.find(chunk => chunk.trim().startsWith(vuln.name));

                if (correctChunk) {
                    // 只在找到的這個小區塊內搜尋分數，確保不會找到別的弱點分數
                    const scoreMatch = correctChunk.match(/CVSSv4 Score：(\d{1,2}\.\d)/);
                    if (scoreMatch && scoreMatch[1]) {
                        vuln.severity = parseFloat(scoreMatch[1]);
                    } else {
                        console.warn(`在 "${vuln.name}" 的區塊中找不到CVSS分數。`);
                    }
                } else {
                    console.warn(`找不到 "${vuln.name}" 的詳細說明區塊。`);
                }
            });


            // 步驟 4: 更新圖表資料並重新繪製
            vulnerabilitiesForVulnMap = [];
            vulnerabilities.forEach(vuln => {
                if (vuln.severity > 0) {
                    const categoryIndex = echartsCategories_VulnMap.findIndex(cat => cat.id === vuln.owaspId);
                    if (categoryIndex !== -1) {
                        vulnerabilitiesForVulnMap.push({
                            name: vuln.name,
                            categoryIndex: categoryIndex,
                            severity: vuln.severity
                        });
                    }
                }
            });

            updateVulnTableInMapTab();
            renderEchartsForVulnMapTab();
            alert(`成功解析並載入 ${vulnerabilitiesForVulnMap.length} 個弱點！`);

        }).catch(function (error) {
            alert('解析Word檔案失敗: ' + error.message);
            console.error(error);
        });
    };
    reader.readAsArrayBuffer(file);
}


function initEchartsForVulnMapTab() {
    const chartDom = document.getElementById('owaspRadarChart');
    if (!chartDom) return;
    echartsRadarInstance = echarts.init(chartDom);
    window.echartsRadarInstance = echartsRadarInstance; // 掛載到 window 供 main.js 使用

    const option = {
        title: { text: document.getElementById('vulnerabilityMapChartTitle').value, left: 'center' },
        tooltip: { trigger: 'item' },
        legend: { data: ['弱點嚴重度'], bottom: 5 },
        radar: { indicator: echartsCategories_VulnMap.map(c => ({ name: c.name, max: 10 })) },
        series: [{
            name: '弱點嚴重度', type: 'radar',
            data: [{ value: Array(10).fill(0), name: '弱點嚴重度' }],
            areaStyle: { color: 'rgba(255, 107, 51, 0.4)' },
            lineStyle: { color: 'rgb(255, 107, 51)' }
        }]
    };
    echartsRadarInstance.setOption(option);
}

// --- 初始化函式 ---
export function init() {
    populateVulnCategoryDropdown();
    initEchartsForVulnMapTab();
    updateVulnTableInMapTab();

    // 綁定事件
    document.getElementById('addVulnToMapBtn').addEventListener('click', addVulnToMap);
    document.getElementById('resetVulnMapBtn').addEventListener('click', resetVulnMap);
    document.getElementById('updateVulnMapTitleBtn').addEventListener('click', () => updateEChartsChartTitle(echartsRadarInstance, 'vulnerabilityMapChartTitle'));
    document.getElementById('downloadVulnMapImageBtn').addEventListener('click', () => downloadChart('owaspRadarChart', true, echartsRadarInstance));
    
    const wordFileInput = document.getElementById('vulnMapWordFile');
    document.getElementById('parseVulnMapWordBtn').addEventListener('click', () => wordFileInput.click());
    wordFileInput.addEventListener('change', parseWordForVulnMap);
}