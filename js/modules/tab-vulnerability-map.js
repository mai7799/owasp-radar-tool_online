// js/modules/tab-vulnerability-map.js

import { OWASP_CATEGORIES_ECHARTS, updateEChartsChartTitle, downloadChart } from './chart-common.js';

let echartsRadarInstance = null;
let vulnerabilities = []; // 儲存所有弱點
const SEVERITY_MAP = { 'Critical': 4, 'High': 3, 'Medium': 2, 'Low': 1 };
const SEVERITY_COLORS = { 'Critical': '#ff0000', 'High': '#ff6b33', 'Medium': '#ffcc00', 'Low': '#66cc66' };

// 初始化 ECharts 圖表
function initEchartsRadar() {
    const chartDom = document.getElementById('owaspRadarChart');
    echartsRadarInstance = echarts.init(chartDom);
    // 將實例掛載到 window，以便主腳本可以 resize
    window.echartsRadarInstance = echartsRadarInstance; 

    const option = {
        title: {
            text: document.getElementById('echartsChartTitle').value,
            left: 'center'
        },
        tooltip: {
            trigger: 'item',
            formatter: (params) => {
                let content = `<b>${params.name}</b> (${params.seriesName})<br/>`;
                const vulns = vulnerabilities.filter(v => v.category === params.name.split(':')[0]);
                if (vulns.length > 0) {
                    vulns.forEach(v => {
                       content += `<span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${SEVERITY_COLORS[v.severity]};"></span> ${v.name} (${v.severity})<br/>`;
                    });
                } else {
                    content += '無弱點';
                }
                return content;
            }
        },
        legend: { data: ['弱點分布'], bottom: 5 },
        radar: { indicator: OWASP_CATEGORIES_ECHARTS },
        series: [{
            name: '弱點分布',
            type: 'radar',
            data: [{ value: Array(10).fill(0), name: '弱點分布' }],
            symbolSize: 8,
            areaStyle: {
                color: 'rgba(255, 107, 51, 0.4)'
            },
            lineStyle: {
                color: 'rgb(255, 107, 51)'
            }
        }]
    };
    echartsRadarInstance.setOption(option);
}

// 根據弱點列表更新圖表
function updateEchartsRadar() {
    const categoryValues = Array(10).fill(0);
    const categoryMaxValues = OWASP_CATEGORIES_ECHARTS.map(cat => cat.max);

    vulnerabilities.forEach(vuln => {
        const categoryIndex = parseInt(vuln.category.substring(1), 10) - 1;
        if (categoryIndex >= 0 && categoryIndex < 10) {
            categoryValues[categoryIndex] = Math.max(categoryValues[categoryIndex], SEVERITY_MAP[vuln.severity]);
        }
    });
    
    // 重新計算雷達圖的最大值
    const maxSeverityValue = Math.max(...categoryValues, 4);
    const newMax = Math.ceil(maxSeverityValue / 2) * 2; 
    const newIndicator = OWASP_CATEGORIES_ECHARTS.map(ind => ({ ...ind, max: newMax }));

    echartsRadarInstance.setOption({
        radar: { indicator: newIndicator },
        series: [{ data: [{ value: categoryValues, name: '弱點分布' }] }]
    });
}

// 渲染弱點列表 UI
function renderVulnerabilityList() {
    const listElement = document.getElementById('vulnerability-list');
    listElement.innerHTML = '';
    vulnerabilities.forEach((vuln, index) => {
        const li = document.createElement('li');
        li.innerHTML = `
            <span><b>[${vuln.category}]</b> ${vuln.name} (${vuln.severity})</span>
            <button class="delete-btn" data-index="${index}">刪除</button>
        `;
        listElement.appendChild(li);
    });
}

// 新增弱點
function addVulnerability() {
    const name = document.getElementById('vulnerabilityName').value.trim();
    const category = document.getElementById('vulnerabilityCategory').value;
    const severity = document.getElementById('vulnerabilitySeverity').value;

    if (!name) {
        alert('請輸入弱點名稱');
        return;
    }

    vulnerabilities.push({ name, category, severity });
    vulnerabilities.sort((a, b) => (SEVERITY_MAP[b.severity] - SEVERITY_MAP[a.severity]) || a.category.localeCompare(b.category));
    
    renderVulnerabilityList();
    updateEchartsRadar();
    
    document.getElementById('vulnerabilityName').value = '';
    document.getElementById('vulnerabilityName').focus();
}

// 刪除弱點
function deleteVulnerability(index) {
    vulnerabilities.splice(index, 1);
    renderVulnerabilityList();
    updateEchartsRadar();
}

// 導出 CSV
function downloadVulnerabilityCSV() {
    const csvContent = "data:text/csv;charset=utf-8," + Papa.unparse(vulnerabilities);
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "vulnerability_data.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

// 導入 CSV
function importVulnerabilityCSV(event) {
    const file = event.target.files[0];
    if (file) {
        Papa.parse(file, {
            header: true,
            skipEmptyLines: true,
            complete: (results) => {
                if (confirm('這將會覆蓋現有的弱點列表，確定嗎？')) {
                    vulnerabilities = results.data;
                    renderVulnerabilityList();
                    updateEchartsRadar();
                }
            }
        });
        event.target.value = ''; // Reset input
    }
}

// 此模組的初始化函式
export function init() {
    initEchartsRadar();

    document.getElementById('addVulnerabilityBtn').addEventListener('click', addVulnerability);
    document.getElementById('updateEchartsTitleBtn').addEventListener('click', () => {
        updateEChartsChartTitle(echartsRadarInstance, 'echartsChartTitle');
    });
    
    document.getElementById('vulnerability-list').addEventListener('click', (event) => {
        if (event.target.classList.contains('delete-btn')) {
            const index = event.target.dataset.index;
            deleteVulnerability(index);
        }
    });

    document.getElementById('downloadVulnerabilityCSVBtn').addEventListener('click', downloadVulnerabilityCSV);
    const importCSVInput = document.getElementById('importCSV');
    document.getElementById('importVulnerabilityCSVBtn').addEventListener('click', () => importCSVInput.click());
    importCSVInput.addEventListener('change', importVulnerabilityCSV);

    document.getElementById('downloadEchartsBtn').addEventListener('click', () => {
        downloadChart('owaspRadarChart', true, echartsRadarInstance);
    });
}